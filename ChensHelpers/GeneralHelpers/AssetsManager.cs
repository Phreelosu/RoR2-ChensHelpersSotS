using R2API;
using System;
using System.Reflection;
using UnityEngine;
using Object = UnityEngine.Object;

namespace Chen.Helpers.GeneralHelpers
{
    /// <summary>
    /// A helper class that handles registering bundles for use in a mod.
    /// Keep an instance of this class internal or local to the mod.
    /// </summary>
    public class AssetsManager
    {
        private readonly BundleInfo bundleInfo;

        /// <summary>
        /// Constructor to use if the bundles are already made.
        /// </summary>
        /// <param name="bundleInfo">Bundle for the helper class to manage</param>
        public AssetsManager(BundleInfo bundleInfo)
        {
            this.bundleInfo = bundleInfo;
        }

        /// <summary>
        /// Invoke this method to start registering the bundle assigned to this manager.
        /// </summary>
        /// <returns>Null, or an AssetBundle object if the BundleType is a UnityAssetBundle.</returns>
        public Object Register()
        {
            using (var stream = Assembly.GetCallingAssembly().GetManifestResourceStream(bundleInfo.source))
            {
                switch (bundleInfo.type)
                {
                    case BundleType.UnityAssetBundle:
                        var bundle = AssetBundle.LoadFromStream(stream);
                        return bundle;

                    case BundleType.WWiseSoundBank:
                        var bytes = new byte[stream.Length];
                        stream.Read(bytes, 0, bytes.Length);
                        SoundAPI.SoundBanks.Add(bytes);
                        return null;

                    default:
                        return null;
                }
            }
        }

        /// <summary>
        /// A data structure that holds the information about the bundle.
        /// This is used by the AssetsManager.
        /// </summary>
        public struct BundleInfo : IEquatable<BundleInfo>
        {
            /// <summary>
            /// The mod prefix is defined to be the identifier to the bundle for accessing. It should always start with "@".
            /// </summary>
            public string modPrefix;

            /// <summary>
            /// The source is the resource path as defined by a mod. The bundle must be Embedded as Resource.
            /// </summary>
            public string source;

            /// <summary>
            /// Type of the bundle.
            /// </summary>
            public BundleType type;

            /// <summary>
            /// Constructor used to build BundleInfo.
            /// </summary>
            /// <param name="modPrefix">The prefix used to access the bundle</param>
            /// <param name="source">The resource path of the bundle</param>
            /// <param name="type">Type of the bundle</param>
            public BundleInfo(string modPrefix, string source, BundleType type)
            {
                this.modPrefix = modPrefix;
                this.source = source;
                this.type = type;
            }

            /// <summary>
            /// Defines the equality of this struct. Always use this method to compare BundleInfo data.
            /// </summary>
            /// <param name="other">The other BundleInfo to compare with</param>
            /// <returns>The equality truthiness</returns>
            public bool Equals(BundleInfo other) => modPrefix == other.modPrefix && source == other.source;
        }

        /// <summary>
        /// This is used to identify the type of the bundle for differentiation in registration process.
        /// </summary>
        public enum BundleType : byte
        {
            /// <summary>
            /// This Bundle Type refers to the asset bundles generated in Unity through AssetBundleBrowser.
            /// </summary>
            UnityAssetBundle,

            /// <summary>
            /// This Bundle Type refers to the sound bank generated by WWise.
            /// </summary>
            WWiseSoundBank
        }
    }
}